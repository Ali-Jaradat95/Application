using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Volo.Abp.Domain.Repositories;

namespace Application.MadfoatcomResponses
{
    public partial interface IMadfoatcomResponseRepository : IRepository<MadfoatcomResponse, int>
    {
        Task<List<MadfoatcomResponse>> GetListAsync(
            string? filterText = null,
            int? billerCodeMin = null,
            int? billerCodeMax = null,
            string? billingNo = null,
            string? billNo = null,
            string? dueAmt = null,
            string? validationCode = null,
            string? serviceType = null,
            string? prepaidCat = null,
            string? amount = null,
            int? setBnkCodeMin = null,
            int? setBnkCodeMax = null,
            string? acctNo = null,
            string? transferReason = null,
            string? receivingCountry = null,
            string? custName = null,
            string? email = null,
            string? phone = null,
            int? recCountMin = null,
            int? recCountMax = null,
            string? billStatus = null,
            string? dueAmount = null,
            DateTime? issueDateMin = null,
            DateTime? issueDateMax = null,
            DateTime? openDateMin = null,
            DateTime? openDateMax = null,
            DateTime? dueDateMin = null,
            DateTime? dueDateMax = null,
            DateTime? expiryDateMin = null,
            DateTime? expiryDateMax = null,
            DateTime? closeDateMin = null,
            DateTime? closeDateMax = null,
            string? billType = null,
            bool? allowPart = null,
            string? upper = null,
            string? lower = null,
            int? billsCountMin = null,
            int? billsCountMax = null,
            string? jOEBPPSTrx = null,
            DateTime? processDateMin = null,
            DateTime? processDateMax = null,
            string? sTMTDate = null,
            string? sorting = null,
            int maxResultCount = int.MaxValue,
            int skipCount = 0,
            CancellationToken cancellationToken = default
        );

        Task<long> GetCountAsync(
            string? filterText = null,
            int? billerCodeMin = null,
            int? billerCodeMax = null,
            string? billingNo = null,
            string? billNo = null,
            string? dueAmt = null,
            string? validationCode = null,
            string? serviceType = null,
            string? prepaidCat = null,
            string? amount = null,
            int? setBnkCodeMin = null,
            int? setBnkCodeMax = null,
            string? acctNo = null,
            string? transferReason = null,
            string? receivingCountry = null,
            string? custName = null,
            string? email = null,
            string? phone = null,
            int? recCountMin = null,
            int? recCountMax = null,
            string? billStatus = null,
            string? dueAmount = null,
            DateTime? issueDateMin = null,
            DateTime? issueDateMax = null,
            DateTime? openDateMin = null,
            DateTime? openDateMax = null,
            DateTime? dueDateMin = null,
            DateTime? dueDateMax = null,
            DateTime? expiryDateMin = null,
            DateTime? expiryDateMax = null,
            DateTime? closeDateMin = null,
            DateTime? closeDateMax = null,
            string? billType = null,
            bool? allowPart = null,
            string? upper = null,
            string? lower = null,
            int? billsCountMin = null,
            int? billsCountMax = null,
            string? jOEBPPSTrx = null,
            DateTime? processDateMin = null,
            DateTime? processDateMax = null,
            string? sTMTDate = null,
            CancellationToken cancellationToken = default);
    }
}